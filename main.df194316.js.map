{"version":3,"sources":["scripts/main.js"],"names":["phoneDetails","BASE_URL","DETAILS_URL","body","document","querySelector","phonesId","getPhones","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","status","statusText","result","getFirstReceivedDetails","phones","forEach","phone","push","id","map","itemId","createTable","race","addPhoneToTable","name","catch","error","getAllSuccessfulDetails","allSettled","results","value","getThreeFastestDetails","all","className","headerText","table","createElement","prepend","insertAdjacentHTML","phonesName"],"mappings":";AAAA,aAIA,IAOIA,EAPEC,EACF,wEACEC,EACF,oEAEEC,EAAOC,SAASC,cAAc,QAC9BC,EAAW,GAGXC,EAAY,WACTC,OAAAA,MAAMP,GACVQ,KAAK,SAAAC,GACA,OAACA,EAASC,GAMTD,EAASE,QAAQC,IAAI,gBAAgBC,SAAS,oBAM5CJ,EAASK,OALPC,QAAQC,OAAO,IAAIC,MACWR,mCAAAA,OAAAA,EAASS,UAPvCH,QAAQC,OAAO,IAAIC,MACrBR,GAAAA,OAAAA,EAASS,OAAYT,OAAAA,OAAAA,EAASU,gBAYtCX,KAAK,SAAAY,GAAUA,OAAAA,KAGdC,EAA0B,WAC9Bf,IACGE,KAAK,SAAAc,GACJA,EAAOC,QAAQ,SAAAC,GAASnB,OAAAA,EAASoB,KAAKD,EAAME,MAE5C3B,EAAeM,EAASsB,IAAI,SAAAC,GAC1BrB,OAAAA,MAASN,GAAAA,OAAAA,GAAc2B,OAAAA,EAAvB,UACGpB,KAAK,SAAAC,GAAYA,OAAAA,EAASK,WAE/Be,EAAY,iBAAkB,kBAE9Bd,QAAQe,KAAK/B,GACVS,KAAK,SAAAY,GACJW,OAAAA,EAAgB,iBAAkBX,EAAOY,UAE9CC,MAAM,SAAAC,GAAS,OAAA,IAAIjB,MAAMiB,MAG9Bb,IAEA,IAAMc,EAA0B,WAC9B7B,IACGE,KAAK,SAAAc,GACJA,EAAOC,QAAQ,SAAAC,GAASnB,OAAAA,EAASoB,KAAKD,EAAME,MAE5C3B,EAAeM,EAASsB,IAAI,SAAAC,GAC1BrB,OAAAA,MAASN,GAAAA,OAAAA,GAAc2B,OAAAA,EAAvB,UACGpB,KAAK,SAAAC,GAAYA,OAAAA,EAASK,WAE/Be,EAAY,iBAAkB,kBAE9Bd,QAAQqB,WAAWrC,GAChBS,KAAK,SAAA6B,GACJA,EAAQd,QAAQ,SAAAH,GACQ,cAAlBA,EAAOF,QACTa,EAAgB,iBAAkBX,EAAOkB,MAAMN,YAKxDC,MAAM,SAAAC,GAAS,OAAA,IAAIjB,MAAMiB,MAG9BC,IAEA,IAAMI,EAAyB,WAC7BjC,IACGE,KAAK,SAAAc,GASGP,OARPO,EAAOC,QAAQ,SAAAC,GAASnB,OAAAA,EAASoB,KAAKD,EAAME,MAE5C3B,EAAeM,EAASsB,IAAI,SAAAC,GAC1BrB,OAAAA,MAASN,GAAAA,OAAAA,GAAc2B,OAAAA,EAAvB,UACGpB,KAAK,SAAAC,GAAYA,OAAAA,EAASK,WAE/Be,EAAY,gBAAiB,iBAEtBd,QAAQyB,IAAI,CACjBzB,QAAQe,KAAK/B,GACVS,KAAK,SAAAY,GACJW,OAAAA,EAAgB,gBAAiBX,EAAOY,QAE5CjB,QAAQe,KAAK/B,GACVS,KAAK,SAAAY,GACJW,OAAAA,EAAgB,gBAAiBX,EAAOY,QAE5CjB,QAAQe,KAAK/B,GACVS,KAAK,SAAAY,GACJW,OAAAA,EAAgB,gBAAiBX,EAAOY,YAG/CC,MAAM,SAAAC,GAAS,OAAA,IAAIjB,MAAMiB,MAK9B,SAASL,EAAYY,EAAWC,GACxBC,IAAAA,EAAQxC,SAASyC,cAAc,SAErCD,EAAMF,UAAYA,EAClBvC,EAAK2C,QAAQF,GAEbA,EAAMG,mBAAmB,YAEfJ,yBAAAA,OAAAA,EAFV,wBAOF,SAASX,EAAgBU,EAAWM,GAClC7C,EAAKE,cAAkBqC,IAAAA,OAAAA,IAAaK,mBAAmB,YAE7CC,yBAAAA,OAAAA,EAFV,qBAhBFR","file":"main.df194316.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write code here\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst DETAILS_URL\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\n\nconst body = document.querySelector('body');\nconst phonesId = [];\nlet phoneDetails;\n\nconst getPhones = () => {\n  return fetch(BASE_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(new Error(\n          `${response.status} - ${response.statusText}`\n        ));\n      }\n\n      if (!response.headers.get('content-type').includes('application/json')) {\n        return Promise.reject(new Error(\n          `Content-type is not supported - ${response.status}`\n        ));\n      }\n\n      return response.json();\n    })\n    .then(result => result);\n};\n\nconst getFirstReceivedDetails = () => {\n  getPhones()\n    .then(phones => {\n      phones.forEach(phone => phonesId.push(phone.id));\n\n      phoneDetails = phonesId.map(itemId =>\n        fetch(`${DETAILS_URL}${itemId}.json`)\n          .then(response => response.json()));\n\n      createTable('first-received', 'First Received');\n\n      Promise.race(phoneDetails)\n        .then(result =>\n          addPhoneToTable('first-received', result.name));\n    })\n    .catch(error => new Error(error));\n};\n\ngetFirstReceivedDetails();\n\nconst getAllSuccessfulDetails = () => {\n  getPhones()\n    .then(phones => {\n      phones.forEach(phone => phonesId.push(phone.id));\n\n      phoneDetails = phonesId.map(itemId =>\n        fetch(`${DETAILS_URL}${itemId}.json`)\n          .then(response => response.json()));\n\n      createTable('all-successful', 'All Successful');\n\n      Promise.allSettled(phoneDetails)\n        .then(results => {\n          results.forEach(result => {\n            if (result.status === 'fulfilled') {\n              addPhoneToTable('all-successful', result.value.name);\n            }\n          });\n        });\n    })\n    .catch(error => new Error(error));\n};\n\ngetAllSuccessfulDetails();\n\nconst getThreeFastestDetails = () => {\n  getPhones()\n    .then(phones => {\n      phones.forEach(phone => phonesId.push(phone.id));\n\n      phoneDetails = phonesId.map(itemId =>\n        fetch(`${DETAILS_URL}${itemId}.json`)\n          .then(response => response.json()));\n\n      createTable('three-fastest', 'Three Fastest');\n\n      return Promise.all([\n        Promise.race(phoneDetails)\n          .then(result =>\n            addPhoneToTable('three-fastest', result.name)),\n\n        Promise.race(phoneDetails)\n          .then(result =>\n            addPhoneToTable('three-fastest', result.name)),\n\n        Promise.race(phoneDetails)\n          .then(result =>\n            addPhoneToTable('three-fastest', result.name)),\n      ]);\n    })\n    .catch(error => new Error(error));\n};\n\ngetThreeFastestDetails();\n\nfunction createTable(className, headerText) {\n  const table = document.createElement('table');\n\n  table.className = className;\n  body.prepend(table);\n\n  table.insertAdjacentHTML('beforeend', `\n    <tr>\n      <th>${headerText}</th>\n    </tr>\n `);\n}\n\nfunction addPhoneToTable(className, phonesName) {\n  body.querySelector(`.${className}`).insertAdjacentHTML('beforeend', `\n    <tr>\n      <td>${phonesName}</td>\n    </tr>`);\n}\n"]}